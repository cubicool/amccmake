#!/usr/bin/env bash

# amccmake: Automated Mulitple Compiler cmake
# By: Jeremy Moles (cubicool@gmail.com)

VERSION="1"
CONF_FILE="amccmake.conf"
ERROR_FILE="error.txt"

# Dumps a basic ${CONF_FILE} file to stdout. This is then later redirected
# to the actual file on disk.
function DumpConfig() { cat <<'EOF'
# The path to the CMakeLists.txt file. By default (if the variable is empty), it is the
# same directory as this configuration file.
CMAKELISTS_PATH=""

# The path to the directory in which the various supported compiler and build combinations
# are configured. By default, it inside a directory called "build", at the same level as
# the CMakeLists.txt file specified by the previous variable. This variable should ALWAYS
# be specified RELATIVE to the CMAKELISTS_PATH variable; i.e., DO NOT USE A FULL PATH
# here.
BUILD_PATH="build"

# Using these variables you can control which actual compiler configurations are generated.
# There are no default values for these, so setting the variable to an empty string will
# cause amccmake to ignore that compiler.
GCC="true"
CLANG="true"
MINGW=""

# These variables are applied to every configuration of your project.
CMAKE_VARS=(
)

# Options in this array (and the corresponding arrays that follow) are only
# aplied to the configurations using the specific compiler they represent.
gcc_CMAKE_VARS=(
	-DCMAKE_C_FLAGS_INIT="'-W -Wall -Wno-unused-parameter -Werror -ansi -pedantic -Winvalid-pch'"
	-DCMAKE_CXX_FLAGS_INIT="'-W -Wall -Wno-unused-parameter -Werror -Winvalid-pch -std=c++11'"
)

clang_CMAKE_VARS=(
	-DCMAKE_C_FLAGS_INIT="'-W -Wall -Wno-unused-parameter -Werror -ansi -pedantic -Wno-error=unused-command-line-argument -Winvalid-pch -Qunused-arguments'"
	-DCMAKE_CXX_FLAGS_INIT="'-W -Wall -Wno-unused-parameter -Werror -Wno-error=unused-command-line-argument -Winvalid-pch -Qunused-arguments -std=c++11'"
)

mingw_CMAKE_VARS=(
)

# Here you can override the actual cmake invocations that are called. By default,
# they are: cmake, cmake, and mingw-cmake, respectively. If you leave the variables
# blank, the defaults will be used.
gcc_CMAKE=""
clang_CMAKE=""
mingw_CMAKE=""

# Called immedately before the corresponding *_CMAKE command is evaluated, allowing the user to
# automate any steps necessary before cmake is fired off. This function is executed inside the
# generated build directory, so directories can be referenced relatively.  You will need to look at
# the source of amccmake (for now) to see what variables are available to you. NOTE: The output of
# this function (and PostConfigure) is sent to the error log file.
function PreConfigure() {
	return 0
}

# This function is called immediately after the approprate *_CMAKE command returns success. It can be used, for
# example, to make symlinks to other directories in your source tree so that some sources remain easy to navigate
# and fetch from within the generated build directory. It could also be setup to do any necessary postprocessing or
# cleanup. Like PreConfigure, the current directory is the generated build directory.
function PostConfigure() {
	return 0
}

EOF
}

# TODO: amccmake cmake ${CONF_FILE}
#
# This command would read in the ${CONF_FILE} variable and dump out a CompilerOptions.cmake
# file which can be used instead. However, this method is more difficult and potentially
# much less flexible, so it will be a while before I finish it. However, once done, it does
# make it a bit cleaner to use amccmake in your projects, since ONLY the CMake maintainer
# of your projects has to run and use amccmake.
#
# TODO: Figure out how to detect mingw/crosscompile.
# TODO: Figure out how to integrate the Pre/PostConfigure scripts.
function DumpCompilerCMake() { cat <<EOF
IF("\${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    SET(CMAKE_C_FLAGS_INIT "")
    SET(CMAKE_CXX_FLAGS_INIT "")
ELSEIF("\${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(CMAKE_C_FLAGS_INIT "")
    SET(CMAKE_CXX_FLAGS_INIT "")
ELSEIF("\${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    MESSAGE("TODO: Test this compiler!")
ELSEIF("\${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    MESSAGE("TODO: Test this (shitty) compiler.")
ELSE()
    MESSAGE("TODO: Support this compiler.")
ENDIF()
EOF
}

function Help() { cat <<EOF
${0} <config | help | amc_dir...>

OPTIONS
	config: Creates a standard ${CONF_FILE} file in the local directory.
	Generally the first step in using amccmake.

	help: Print this help message.

	amc_dir: The path to a directory containing an ${CONF_FILE} file.

This script is used to generate multiple different directories for your
CMake-based project, one for each compiler/build combination. Currently,
six different directories are created, all inside a directory specified
in the configuration file (BUILD_PATH).
EOF
}

# If we pass "config" as the first argument, create a ${CONF_FILE} in the current directory
# to be edited that controls how amccmake behaves.
if [ "${1}" = "config" ]; then
	# Start by dumping the version of amccmake that was used to generate this configuration
	# file; if it differs from the version being used to parse the file later, amccmake
	# will exit safely.
	echo "# Generated by amccmake on $(date); DO NOT CHANGE THE VERSION MANUALLY!" > "${CONF_FILE}"
	echo -e "AMCCMAKE_VERSION=\"${VERSION}\"\n" >> "${CONF_FILE}"

	DumpConfig >> "${CONF_FILE}"

	echo "${CONF_FILE} created; now edit as necessary."

	exit 1

# If we pass no arguments (or the argument "help"), call the Help() function.
elif [ "${1}" = "help" -o -z "${1}" ]; then
	Help

	exit 2
fi

# This script relies on being called with the path to a configuration file.
# The resultant build directories will be created according to the relative
# values indicated in your config file.
if [ ! -f "${1}" ]; then
	echo "Couldn't find configuration file '${1}'; exiting."

	exit 3
fi

# Source the variables configuration, which will be used by the local variables
# created within this script, whose names are identical (but prefixed with an
# underscore inside this script).
if ! source "${1}" &>/dev/null; then
	echo "Couldn't source configuration file '${1}'; exiting."

	exit 4
fi

if [ -z "${VERSION}" -o "${VERSION}" != "${AMCCMAKE_VERSION}" ]; then
	echo "Version mismatch; exiting."

	exit 5
fi

if [ -z "${CMAKELISTS_PATH}" ]; then
	CMAKELISTS_PATH="."
fi

ABS_CONF_FILE_PATH="$(dirname "$(readlink -f "${1}")")"
CMAKELISTS_PATH="${ABS_CONF_FILE_PATH}/${CMAKELISTS_PATH}"

if [ ! -r "${CMAKELISTS_PATH}/CMakeLists.txt" ]; then
	echo "Couldn't find CMakeLists at: ${CMAKELISTS_PATH}"

	exit 6
fi

# This script will used the paths specified in the configuration file to both
# find the toplevel CMakeLists.txt file and to determine where the build
# directories will be located. However, we get the absolute paths here, to make
# some future calls easier.
ABS_CMAKELISTS_PATH="$(readlink -f "${CMAKELISTS_PATH}")"
ABS_BUILD_PATH="${ABS_CMAKELISTS_PATH}/${BUILD_PATH}"

# I personally DO NOT like to pollute my git repositories with a bunch of build
# directories and cmake files (and to those of you who DON'T mind, how do you manage
# it!?), and I've gotten into the habit of creating a toplevel root build directory
# wherein many various other directories reside representing the compiler and build
# "type" (debug, release) of the project.
# mkdir -p "${ABS_BUILD_PATH}/"{gcc,clang,mingw}-{release,debug}
[ -n "${GCC}" ] && mkdir -p "${ABS_BUILD_PATH}/gcc-"{release,debug}
[ -n "${CLANG}" ] && mkdir -p "${ABS_BUILD_PATH}/clang-"{release,debug}
[ -n "${MINGW}" ] && mkdir -p "${ABS_BUILD_PATH}/mingw-"{release,debug}

# Here we combine the data we sourced from ${CONF_FILE} with our constant global
# data, such as the compiler name, etc.
# TODO: What other things should be turned on/off?
_CMAKE_VARS=(
	${CMAKE_VARS[@]}
)

_gcc_CMAKE_VARS=(
	-DCMAKE_CXX_COMPILER=g++
	-DCMAKE_C_COMPILER=cc
	${gcc_CMAKE_VARS[@]}
)

_clang_CMAKE_VARS=(
	-DCMAKE_CXX_COMPILER=clang++
	-DCMAKE_C_COMPILER=clang
	${clang_CMAKE_VARS[@]}
)

# The compiler here will be controlled by the special cmake wrapper used by mingw;
# at least, it is on my developmente platform (Fedora 22).
# TODO: Is it work supporting mingw32?
_mingw_CMAKE_VARS=(
	${mingw_CMAKE_VARS[@]}
)

# Define the actual cmake invocations for each platform.
_gcc_CMAKE="${gcc_CMAKE:=cmake}"
_clang_CMAKE="${clang_CMAKE:=cmake}"
_mingw_CMAKE="${mingw_CMAKE:=mingw64-cmake}"

# Now we enumerate each of our directories and configure CMake within each.
cd "${ABS_BUILD_PATH}"

# Always use a clean error file; be sure and save them somewhere if you don't
# want them overridden!
rm -f "${ERROR_FILE}"

# TODO: Consider implementing global PreConfigure()/PostConfigure() functions
# that are called before CMake is called for each compiler configuration. This
# would let us setup git submodules, etc.

for D in *; do
	# If we're not a directory, skip.
	if [ ! -d "${D}" ]; then
		continue
	fi

	# Get the left and right parts of the directory name, separated by a "-".
	COMPILER="${D/-*}"
	BUILD="${D#*-}"

	# If we don't match our expected format, skip.
	if [ "${COMPILER}-${BUILD}" != "${D}" ]; then
		continue
	fi

	echo "Configuring cmake for ${COMPILER} ($BUILD)"

	# Execute the actual cmake command in a subshell, so that we can capture all the output
	# AND not have to worry about changing back to this directory.
	#
	# NOTE: Without a doubt, the declaration of CMD is the most insane piece of Bash I've ever written.
	(
		CMD="$(eval echo \${_${COMPILER}_CMAKE}) ${ABS_CMAKELISTS_PATH} ${CMAKE_VARS[@]} -DCMAKE_BUILD_TYPE=${BUILD} $(eval echo "\${_${COMPILER}_CMAKE_VARS[@]}")"

		echo "================================================================================"
		echo "${COMPILER}-${BUILD} >> command was:"

		# This piece of Bash nastiness will format the ${CMD} variable so that it is a bit
		# easier to read. It also trims off trailing whitespace.
		echo "${CMD}" | sed -r 's/\ +-D/\n\t-D/g' | sed -e 's/[[:space:]]*$//'
		echo "================================================================================"

		cd "${D}"

		PreConfigure

		if eval "${CMD}"; then
			PostConfigure
		fi
	) &>> "${ERROR_FILE}"
done

echo "Error log at: $(pwd)/${ERROR_FILE}"

