# Generated by amccmake on Sat Jun 13 11:59:20 EDT 2015; DO NOT CHANGE THE VERSION MANUALLY!
AMCCMAKE_VERSION="1"

# The path to the CMakeLists.txt file. By default (if the variable is empty), it is the
# same directory as this configuration file.
CMAKELISTS_PATH=""

# The path to the directory in which the various supported compiler and build combinations
# are configured. By default, it inside a directory called "build", at the same level as
# the CMakeLists.txt file specified by the previous variable. This variable should ALWAYS
# be specified RELATIVE to the CMAKELISTS_PATH variable; i.e., DO NOT USE A FULL PATH
# here.
BUILD_PATH="build"

# Using these variables you can control which actual compiler configurations are generated.
# There are no default values for these, so setting the variable to an empty string will
# cause amccmake to ignore that compiler.
GCC="true"
CLANG="true"
MINGW=""

# These variables are applied to every configuration of your project.
CMAKE_VARS=(
)

# Options in this array (and the corresponding arrays that follow) are only
# aplied to the configurations using the specific compiler they represent.
gcc_CMAKE_VARS=(
	-DCMAKE_C_FLAGS_INIT="'-W -Wall -Wno-unused-parameter -Werror -ansi -pedantic -Winvalid-pch'"
	-DCMAKE_CXX_FLAGS_INIT="'-W -Wall -Wno-unused-parameter -Werror -Winvalid-pch -std=c++11'"
)

clang_CMAKE_VARS=(
	-DCMAKE_C_FLAGS_INIT="'-W -Wall -Wno-unused-parameter -Werror -ansi -pedantic -Wno-error=unused-command-line-argument -Winvalid-pch -Qunused-arguments'"
	-DCMAKE_CXX_FLAGS_INIT="'-W -Wall -Wno-unused-parameter -Werror -Wno-error=unused-command-line-argument -Winvalid-pch -Qunused-arguments -std=c++11'"
)

mingw_CMAKE_VARS=(
)

# Here you can override the actual cmake invocations that are called. By default,
# they are: cmake, cmake, and mingw-cmake, respectively. If you leave the variables
# blank, the defaults will be used.
gcc_CMAKE=""
clang_CMAKE=""
mingw_CMAKE=""

# Called immedately before the corresponding *_CMAKE command is evaluated, allowing the user to automate any
# steps necessary before cmake is fired off. This function is executed inside the generated build directory,
# so directories can be referenced relatively.
function PreConfigure() {
	return 0
}

# This function is called immediately after the approprate *_CMAKE command returns success. It can be used, for
# example, to make symlinks to other directories in your source tree so that some sources remain easy to navigate
# and fetch from within the generated build directory. It could also be setup to do any necessary postprocessing or
# cleanup. Like PreConfigure, the current directory is the generated build directory.
function PostConfigure() {
	return 0
}

